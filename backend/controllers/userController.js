// controllers/userController.js
const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

// -------------------
// üß© 1. ƒêƒÉng k√Ω
// -------------------
const signup = async (req, res) => {
  try {
    const { ten, email, password, role } = req.body;

    // Ki·ªÉm tra ƒë·ªß d·ªØ li·ªáu
    if (!ten || !email || !password) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    // Ki·ªÉm tra email t·ªìn t·∫°i
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i!" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // T·∫°o user m·ªõi
    const newUser = new User({
      ten,
      email,
      password: hashedPassword,
      role: role || "user", // m·∫∑c ƒë·ªãnh user
    });

    await newUser.save();
    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", user: newUser });
  } catch (error) {
    console.error("L·ªói khi ƒëƒÉng k√Ω:", error);
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng k√Ω!" });
  }
};
// -------------------
// üß© 2. ƒêƒÉng nh·∫≠p
// -------------------
const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // T√¨m user theo email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u!" });
    }

    // T·∫°o token
    const token = jwt.sign(
      { id: user._id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "7d" }
    );

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: {
        id: user._id,
        ten: user.ten,
        email: user.email,
        role: user.role,
      },
    });
  } catch (error) {
    console.error("üí• L·ªói chi ti·∫øt khi ƒëƒÉng nh·∫≠p:", error); // ‚ö†Ô∏è Th√™m d√≤ng n√†y
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p!" });
  }
};


// -------------------
// üß© 3. ƒêƒÉng xu·∫•t
// -------------------
const logout = (req, res) => {
  res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });
};

// -------------------
// üß© 4. L·∫•y to√†n b·ªô user
// -------------------
const getUsers = async (req, res) => {
  try {
    if (req.user?.role !== "admin") {
  return res.status(403).json({ message: "Ch·ªâ Admin m·ªõi xem ƒë∆∞·ª£c danh s√°ch user" });
}
const users = await User.find();
    res.json(users);
  } catch (err) {
    res.status(500).json({ message: "Kh√¥ng th·ªÉ t·∫£i danh s√°ch user." });
  }
};

// -------------------
// üß© 5. T·∫°o user m·ªõi
// -------------------
const createUser = async (req, res) => {
  try {
    const { ten, email, mssv, lop } = req.body;
    if (!ten || !email) {
      return res.status(400).json({ message: "Thi·∫øu t√™n ho·∫∑c email." });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i." });
    }

    const newUser = new User({ ten, email, mssv, lop, role: req.body.role || "user" });
    const savedUser = await newUser.save();
    res.status(201).json(savedUser);
  } catch (err) {
    res.status(500).json({ message: "L·ªói server khi th√™m ng∆∞·ªùi d√πng." });
  }
};

// -------------------
// üß© 6. C·∫≠p nh·∫≠t user (b·∫±ng ID)
// -------------------
const updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const updatedUser = await User.findByIdAndUpdate(id, req.body, { new: true });
    if (!updatedUser) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user." });
    res.json(updatedUser);
  } catch {
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t user." });
  }
};

// -------------------
// üß© 7. X√≥a user
// -------------------
const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    const deletedUser = await User.findByIdAndDelete(id);
    if (!deletedUser) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user." });
    res.json({ message: "ƒê√£ x√≥a user th√†nh c√¥ng." });
  } catch {
    res.status(500).json({ message: "L·ªói server khi x√≥a user." });
  }
};

// -------------------
// üÜï 8. Xem th√¥ng tin c√° nh√¢n (GET /profile)
// -------------------
const getProfile = async (req, res) => {
  try {
    const email = req.query.email; // L·∫•y email t·ª´ query (ho·∫∑c t·ª´ token n·∫øu c√≥)
    if (!email) return res.status(400).json({ message: "Thi·∫øu email" });

    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    res.json(user);
  } catch (err) {
    console.error("L·ªói khi l·∫•y profile:", err);
    res.status(500).json({ message: "L·ªói server khi l·∫•y th√¥ng tin." });
  }
};

// -------------------
// üÜï 9. C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n (PUT /profile)
// -------------------
const updateProfile = async (req, res) => {
  try {
    const { email, ten, mssv, lop } = req.body;
    if (!email) return res.status(400).json({ message: "Thi·∫øu email" });

    const updatedUser = await User.findOneAndUpdate(
      { email },
      { ten, mssv, lop },
      { new: true }
    );

    if (!updatedUser) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user: updatedUser });
  } catch (err) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t profile:", err);
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t." });
  }
};

// -------------------
// ‚úÖ Xu·∫•t t·∫•t c·∫£ h√†m ra cu·ªëi c√πng
// -------------------
module.exports = {
  signup,
  login,
  logout,
  getUsers,
  createUser,
  updateUser,
  deleteUser,
  getProfile,      // th√™m m·ªõi
  updateProfile,   // th√™m m·ªõi
};
